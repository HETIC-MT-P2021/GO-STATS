// Code generated by MockGen. DO NOT EDIT.
// Source: service/leagueoflegends/lol.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	structs "github.com/wyllisMonteiro/GO-STATS/service/leagueoflegends/structs"
	templates "github.com/wyllisMonteiro/GO-STATS/service/templates"
	apiclient "github.com/yuhanfang/riot/apiclient"
	reflect "reflect"
)

// MockLeagueOfLegends is a mock of LeagueOfLegends interface
type MockLeagueOfLegends struct {
	ctrl     *gomock.Controller
	recorder *MockLeagueOfLegendsMockRecorder
}

// MockLeagueOfLegendsMockRecorder is the mock recorder for MockLeagueOfLegends
type MockLeagueOfLegendsMockRecorder struct {
	mock *MockLeagueOfLegends
}

// NewMockLeagueOfLegends creates a new mock instance
func NewMockLeagueOfLegends(ctrl *gomock.Controller) *MockLeagueOfLegends {
	mock := &MockLeagueOfLegends{ctrl: ctrl}
	mock.recorder = &MockLeagueOfLegendsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLeagueOfLegends) EXPECT() *MockLeagueOfLegendsMockRecorder {
	return m.recorder
}

// GetLOLProfileData mocks base method
func (m *MockLeagueOfLegends) GetLOLProfileData(username string) (structs.DiscordEmbed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLOLProfileData", username)
	ret0, _ := ret[0].(structs.DiscordEmbed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLOLProfileData indicates an expected call of GetLOLProfileData
func (mr *MockLeagueOfLegendsMockRecorder) GetLOLProfileData(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLOLProfileData", reflect.TypeOf((*MockLeagueOfLegends)(nil).GetLOLProfileData), username)
}

// GetAllChampionMasteries mocks base method
func (m *MockLeagueOfLegends) GetAllChampionMasteries(summonerID string) ([]apiclient.ChampionMastery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChampionMasteries", summonerID)
	ret0, _ := ret[0].([]apiclient.ChampionMastery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChampionMasteries indicates an expected call of GetAllChampionMasteries
func (mr *MockLeagueOfLegendsMockRecorder) GetAllChampionMasteries(summonerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChampionMasteries", reflect.TypeOf((*MockLeagueOfLegends)(nil).GetAllChampionMasteries), summonerID)
}

// GetAllLeaguePositionsForSummoner mocks base method
func (m *MockLeagueOfLegends) GetAllLeaguePositionsForSummoner(summonerID string) (templates.Scoring, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLeaguePositionsForSummoner", summonerID)
	ret0, _ := ret[0].(templates.Scoring)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLeaguePositionsForSummoner indicates an expected call of GetAllLeaguePositionsForSummoner
func (mr *MockLeagueOfLegendsMockRecorder) GetAllLeaguePositionsForSummoner(summonerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLeaguePositionsForSummoner", reflect.TypeOf((*MockLeagueOfLegends)(nil).GetAllLeaguePositionsForSummoner), summonerID)
}
