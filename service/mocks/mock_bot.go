// Code generated by MockGen. DO NOT EDIT.
// Source: service/discord/bot.go

// Package mocks is a generated GoMock package.
package mocks

import (
	discordgo "github.com/bwmarrin/discordgo"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBot is a mock of Bot interface
type MockBot struct {
	ctrl     *gomock.Controller
	recorder *MockBotMockRecorder
}

// MockBotMockRecorder is the mock recorder for MockBot
type MockBotMockRecorder struct {
	mock *MockBot
}

// NewMockBot creates a new mock instance
func NewMockBot(ctrl *gomock.Controller) *MockBot {
	mock := &MockBot{ctrl: ctrl}
	mock.recorder = &MockBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBot) EXPECT() *MockBotMockRecorder {
	return m.recorder
}

// ChannelMessageSendEmbed mocks base method
func (m *MockBot) ChannelMessageSendEmbed(arg0 string, arg1 *discordgo.MessageEmbed) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChannelMessageSendEmbed", arg0, arg1)
}

// ChannelMessageSendEmbed indicates an expected call of ChannelMessageSendEmbed
func (mr *MockBotMockRecorder) ChannelMessageSendEmbed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendEmbed", reflect.TypeOf((*MockBot)(nil).ChannelMessageSendEmbed), arg0, arg1)
}

// ChannelMessageSend mocks base method
func (m *MockBot) ChannelMessageSend(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChannelMessageSend", arg0, arg1)
}

// ChannelMessageSend indicates an expected call of ChannelMessageSend
func (mr *MockBotMockRecorder) ChannelMessageSend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockBot)(nil).ChannelMessageSend), arg0, arg1)
}
